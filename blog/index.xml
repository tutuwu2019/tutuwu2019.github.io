<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on 张不大的博客</title>
    <link>https://tutuwu2019.github.io/blog/</link>
    <description>Recent content in Blog on 张不大的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, zhangbdua.</copyright>
    <lastBuildDate>Tue, 19 Nov 2024 22:48:17 +0800</lastBuildDate><atom:link href="https://tutuwu2019.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些sql技巧</title>
      <link>https://tutuwu2019.github.io/%E4%B8%80%E4%BA%9Bsql%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 19 Nov 2024 22:48:17 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E4%B8%80%E4%BA%9Bsql%E6%8A%80%E5%B7%A7/</guid>
      <description>This is a page about »一些sql技巧«.
sql 的一些技巧 sql 与时间相关的用法 获取当前时间 now() 返回当前的日期和时间 (YYYY-MM-DD HH:MM:SS) current_date() 返回当前的日期 (YYYY-MM-DD) current_time() 返回当前的时间(HH:MM:SS) curdate() 返回当前的日期 类似 current_date curtime() 返回当前的时间 类似 current_time SELECT NOW(); -- 获取当前时间 SELECT CURRENT_DATE; -- 获取当前日期 日期与时间运算 date_add() 或 date_sub() 分别用来加、减指定的时间间隔 SELECT DATE_ADD(NOW(), INTERVAL 5 DAY); -- 当前时间加 5 天 SELECT DATE_SUB(NOW(), INTERVAL 2 HOUR); -- 当前时间减去 2 小时 比较日期和时间 日期比较，直接比较date、datetime字段，比如运算符 =、&amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;= SELECT * FROM orders WHERE order_date &amp;gt; &amp;#39;2024-01-01&amp;#39;; 时间区间比较，通过 between 操作符在指定时间范围内查询记录</description>
    </item>
    
    <item>
      <title>Poco库学习&amp;近期随写</title>
      <link>https://tutuwu2019.github.io/poco%E5%BA%93%E5%AD%A6%E4%B9%A0%E8%BF%91%E6%9C%9F%E9%9A%8F%E5%86%99/</link>
      <pubDate>Sat, 26 Oct 2024 23:35:23 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/poco%E5%BA%93%E5%AD%A6%E4%B9%A0%E8%BF%91%E6%9C%9F%E9%9A%8F%E5%86%99/</guid>
      <description>This is a page about »Poco库学习&amp;amp;近期随写«.
Poco库学习&amp;amp;近期随写 poco 库
. xxx.sh ./xxx.sh 和 xxx
poco 库 这个一个c++ 的大一统库，从网络、到文件以及util
让我最直观的感受就是，这是一个 大一统的库，甚至让我梦回学习 java
总的来说，这个项目很大、很广、配置也多，也可以让我学一些新的配置
就比如， bash 脚本 并不一定是 xxx.sh 格式的文件名，xxx 文件也可以是 shell 文件，也可以直接执行
随写 工作上，有些许明显的 工业化 也就是 大家各忙个的 螺丝钉化 还有一个就是 毅力欠缺 不知道要忙啥 忙活 而且重要的是 时间 是实打实的花出去了
还有 好久没有更新了 后面强度得上来，持续性，不能再三天打鱼两天晒网了。
自己，感觉在陌生领域或者是不成熟的领域就容易稳不住阵脚。而且在这个条件下，容易情绪写在脸上，久之不散。</description>
    </item>
    
    <item>
      <title>纳秒级cpu优化&amp;rdtsc测试</title>
      <link>https://tutuwu2019.github.io/%E7%BA%B3%E7%A7%92%E7%BA%A7cpu%E4%BC%98%E5%8C%96rdtsc%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 23 Sep 2024 01:51:56 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E7%BA%B3%E7%A7%92%E7%BA%A7cpu%E4%BC%98%E5%8C%96rdtsc%E6%B5%8B%E8%AF%95/</guid>
      <description>This is a page about »纳秒级cpu优化&amp;amp;rdtsc测试«.
纳秒级cpu优化&amp;amp;rdtsc测试 起因：看了一段演讲视频，感觉讲的偏底层&amp;amp;基础
除法比乘法慢的原因 访问对齐数据更高效 访问松散数据导致cache命中率低下 访问矩阵元素不要跨行访问，要逐行访问 → 编写 cache 友好代码的 第一原则：局部性原则 授人以渔：纳米级优化第一守则：防止编译器好心帮倒忙； 第二守则：禁止CPU调频，否则看不出优化的效果； 第三守则：使用专业工具精准测量-Intel Vtune 内存对其与内存不对其 结构体的定义 松散的结构体不仅浪费内存而且访问效率很低。
struct t1{ int x; char testName[Length]; }; struct t2{ int x; const char* testName; }; 多核加剧了 CPU与内存之间访问的压力
纳秒级调优守则 编译器优化问题 防止编译器好心干坏事
如果调用的函数返回结果没有使用，可能编译器会抛弃这个函数，造成执行结果没有差别
禁止CPU 调频
使用专业工具：VTUNE PROFILEPROFILER
rdtsc参考01
rdtsc demo
使用 rdtsc 指令进行时钟周期级测量
rdtsc 参考02 Pitfalls of TSC usage
rdtsc 参考03
rdtsc 参考04 rdtsc 参考05
rdtsc 参考06
rdtsc 参考07</description>
    </item>
    
    <item>
      <title>日志项目详解</title>
      <link>https://tutuwu2019.github.io/%E6%97%A5%E5%BF%97%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 27 Aug 2024 00:16:12 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E6%97%A5%E5%BF%97%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/</guid>
      <description>This is a page about »日志项目详解«.
详解 tlog 日志项目 日志level、日志时间、日志flag和日志info tlog_level
debug 0 info 1 notice 2 error 3 fatal 4 off 5 end 6 tlog_time
usec、mon、mday、hour、min、sec
日志flag
TLOG_NOCOMPRESS 1 TLOG_SEGMENT 10 TLOG_MULTI_WRITE 100 TLOG_NONBLOCK 1000 TLOG_SCREEN 10000 TLOG_SUPPORT_FORK 100000 TLOG_SCREEN_COLOR 1000000 TLOG_FORMAT_NO_PREFIX 10000000 日志info
level file func line time tlog tlog 可变参数宏定义
// 定于你 tlog_ext 函数，其中 第6个参数采用 printf 格式，从第7个参数采用 可变参数，而且 第6个参数不能为空 extern int tlog_ext(tlog_level level, const char* file, int line, const char* func, void* userptr, const char* format, .</description>
    </item>
    
    <item>
      <title>Sql_note</title>
      <link>https://tutuwu2019.github.io/sql_note/</link>
      <pubDate>Mon, 19 Aug 2024 23:30:26 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/sql_note/</guid>
      <description>This is a page about »Sql_note«.
sql_note 说来惭愧，之前sql 学的就不怎么样，总是写一些很low 的语句，然后现在数据量上来的，得把基础打的更扎实一些才好。
一些tips sql 其实很像一门脚本，当然 .sql 也确实是脚本语言，它也有一些脚本语言的特色(比如简洁)
当然 tips 也是一阵子一阵的持续更新
重命名 sql 的重命名有两种表示的方式，一个是用 as，另一个是直接写别名(当然哈，这就是省略了 as 关键字)
重命名 表名
select column_name as alias_name from table_name; # 省略关键字 select column_name alias_name from table_name; 重命名表名
select column_name from table_name as alias_name; 重命计算字段
select price * quantity as total from orders; 重命名子查询的结果
select alias_name.column_name from (select * from table_name) as alias_name; 往往 重命名会在一些复杂的语句中出现
基本规则 排序 order by desc/asc</description>
    </item>
    
    <item>
      <title>随写_软实力</title>
      <link>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99_%E8%BD%AF%E5%AE%9E%E5%8A%9B/</link>
      <pubDate>Mon, 19 Aug 2024 22:35:14 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99_%E8%BD%AF%E5%AE%9E%E5%8A%9B/</guid>
      <description>This is a page about »随写_
随写_软实力 随写，起因是今天部门聚会。
在看起来欢声笑语的环境，我总是会跟着放松警惕，跟着欢声笑语，当然如果这是我的主战场，到无可厚非，如果是官场、职场，想要做好配演这个角色，看起来，没这么容易。
事情是这样的，很久就说要要约饭的。也听其他同事讲，一般是每隔一个月一次，新同事来了也会安排一次。 然后今天老大在群里讲，下班聚餐。
其实很激动，这是我来上海正儿八经的组建吃饭。当然也是恰好趁着这个组建，更好的了解了解一下组的情况，加深自己的判断与方向。
大致是这样的，新人会小心，也会很规矩。核心原则就是，做好自己该做的事，不该做的不做，不该说的话不说。开开心心吃好饭，高高兴兴跑回家。
我也不知道，从什么时候我成了美其名曰的吃货！对美食一点抵抗力也没有。或许，我就是这样子的人，无可厚非。
而且，我碰到美酒，竟如此没有抵抗力，甚至容易劝酒。是的，我打心里容易是贪酒的，这可能是刻在DNA上，改不掉，可是啊，明明喝醉的滋味很难受，胃里反苦水。
说的有点扯远，回归正题。
软实力 浅显的分析一道后，组里的人事是有一定规则的。
而且这个，规则很明显就是少一些感性的行为，当然也有硬实力的部份。
说实话，我这块讲不清，很大的一部份原因，我自己经历的也少，最职场的这一套，就目前来说还啃不下来。
以前，我以为重情谊，讲情谊，就算是拿捏人情世故，就会你来我往，回往过去，细数人生，不尽人意。。。
拍马屁，是一件体现高情商的事。
对于初级选手来说，更多的，沉闷同时把自己的事情做好，时刻准备下一次抨击。
最后 感谢你能看到这里，听我的胡说八道。
那就让我们一起在人生/职场的路上一路升级打怪吧。
好像6、7、8月写的博客不是很多，博客得全、细、专，当然这不是我断断续续的借口，后面会继续补回来。</description>
    </item>
    
    <item>
      <title>Shell语法</title>
      <link>https://tutuwu2019.github.io/shell%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 14 Aug 2024 01:20:35 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/shell%E8%AF%AD%E6%B3%95/</guid>
      <description>This is a page about »Shell语法«.
shell 语法 其实因该改成 shell 脚本语法
后来，我才发现原来很多越来越方便的语言(迎合人类习惯)的开发，就叫脚本语言开发。
比如 shell脚本、python脚本、js脚本、vim 脚本、lua脚本等等
shell脚本语法 像介绍其他开发语言一样，先介绍变量、常量、逻辑、if-else、循环(for、while)，再到 shell 脚本开发
变量、常量 逻辑(与/或/非) if-else 循环 for、while 脚本 词频统计 话说回来，shell 脚本好像把很多方法嵌入进入了，比如sort
# word.txt the day is sunny the the the sunny is is 首先切片 根据 空格、换行切片成若干个单词
cat ./word.txt | tr -s &amp;rsquo; &amp;rsquo; &amp;lsquo;\n&amp;rsquo;
再将切片后的单词排序 cat ./word.txt | tr -s &amp;rsquo; &amp;rsquo; &amp;lsquo;\n&amp;rsquo; | sort
再将单词去重 cat ./word.txt | tr -s &amp;rsquo; &amp;rsquo; &amp;lsquo;\n&amp;rsquo; | sort | uniq -c</description>
    </item>
    
    <item>
      <title>Epoll_项目分析</title>
      <link>https://tutuwu2019.github.io/epoll_%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 09 Jul 2024 02:50:01 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/epoll_%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</guid>
      <description>对项目webServer 再分析 This is a page about »Epoll_项目分析«. int listenfd = socket(PF_INET, SOCKET_STREAM, 0); ... setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;flag, sizeof(flag)); int ret = 0; ret = bind(listenfd, (struct sockaddr*)&amp;amp;address, sizeof(address)); ret = listen(listenfd, 5); epoll_event events[MAX_EVENT_NUMBER]; epollfd = epoll_create(5); // 后面 epoll_create(5)中的参数后面失效 addfd(epollfd, listenfd, bool_); http_conn::m_epollfd = epollfd; ret = socketpair(PF_UNIX, SOCK_STREAM, 0 , pipefd); setnonblocking(pipefd[1]); addfd(epollfd, pipefd[0], bool_); // 设置管道 pipe[1] 的任务，处理信号 初始化，捕获终止信号，然后调用回调函数，给pipe[1] 发送中断信号、捕获时间alarm信号，然后调用回调函数，给pipe[1] 发送alarm信号 addsig(SIGALRM, sig_handler, false); addsig(SIGTERM, sig_handler, false); while(!</description>
    </item>
    
    <item>
      <title>陈硕论坛的一些问题思考</title>
      <link>https://tutuwu2019.github.io/%E9%99%88%E7%A1%95%E8%AE%BA%E5%9D%9B%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/</link>
      <pubDate>Mon, 01 Jul 2024 12:43:41 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%99%88%E7%A1%95%E8%AE%BA%E5%9D%9B%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/</guid>
      <description>This is a page about »陈硕论坛的一些问题思考«.
会陆续贴图片然后谈谈我的思考
编译问题 gcc 让相同的警告只显示一次 一些开发细节 采用 &amp;lsquo;\n&amp;rsquo; 截断 遇到 EOF 死循环 c++ 关键字篇 volatile 为什么总是谈到 volatile 就会扯到 多线程 啥的。这个关键字 我在查看源码的时候看的比较多，自己基本没咋用过。
volatile 声明的变量 会禁用 储存在 专有寄存器上(我们都知道寄存器io比内存还要快)
虚函数
socket 在多线程发送数据时要加锁吗？
RAII
c++ 泛化 c++ 模版的生命和实现位置问题 关于网络开发 tcp 引用如何避免客户端发送大数据导致心跳超时断开连接？
关键词：心跳连接、mtu、拆包、丢包 场景问题 一个1G的文件，内存限制10M，有序返回频数最高的50个词，该怎么做？ 关键词：排序
多线程执行顺序控制 文件操作 std::map 在不同线程操作不同的key要不要上锁? ext2 文件系统源码分析方法
程序员发展 要保持什么样的心态？ 关于技术博客 关于学历 总结 这算不算站在巨人的肩膀上？ 可以试着这样学习，先看一些知名的入门图书，然后在看一些资深开发的讨论，再从讨论中的获取关键词，然后google，把所有的东西给串起来。
EOF
未完待续</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://tutuwu2019.github.io/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 30 Jun 2024 19:00:44 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>This is a page about »排序算法«.
十大排序算法 总结 排序算法 平均时间复杂度 最好情况 最坏情况 空间复杂度 稳定性 冒泡 O(n^2) O(n) O(n^2) O(1) 稳定 选择 O(n^2) O(n^2) O(n^2) O(1) 不稳定 插入 O(n^2) O(n) O(n^2) O(1) 稳定 希尔 O(nlog(n)) O(nlog^2(n)) O(nlog^2(n)) O(1) 不稳定 归并 O(nlog(n)) O(nlog(n)) O(nlog(n)) O(n) 稳定 快速 O(nlog(n)) O(nlog(n)) O(n^2) O(log(n)) 不稳定 堆排序 O(nlog(n)) O(nlog(n)) O(nlog(n)) O(1) 不稳定 计数 O(n + k) O(n + k) O(n + k) O(k) 稳定 桶 O(n + k) O(n + k) O(n^2) O(n + k) 稳定 基数 O(n * k) O(n * k) O(n * k) O(n + k) 稳定 这十大排序其实，硬记是不大好的，应该巧记，以及熟悉它的思维，我想这才是重点，因为很多高级语言都已经可以直接调用封装的排序库</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基本功</title>
      <link>https://tutuwu2019.github.io/c-%E5%9F%BA%E6%9C%AC%E5%8A%9F/</link>
      <pubDate>Fri, 28 Jun 2024 13:06:38 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/c-%E5%9F%BA%E6%9C%AC%E5%8A%9F/</guid>
      <description>This is a page about »C++基本功«.
c++ c++基本功 基础 基本类型int、long、数组，控制循环for if while swtich， continue与break区别
有一个原则，叫 短整形 &amp;lt;= 整型、整型 &amp;lt;= 长整型、端整形至少16位，长整型至少32位 32位编译器指针大小位4字节，64位编译器指针大小为8字节 基本数据类型大小 cpp的switch语句 go 的switch 可以接函数、同时列举多个表达式 continue 是跳过这层循环，会进行下一次循环，而break 会退出循环，进去下一步语句
c++面向对象，三大特性的理解 继承 封装 多态（一个接口多种实现）
封装：客观事物封装成抽象类，而且类的成员函数和数据只允许可信类或者对象操作。public、private、protected 继承： 多态：消息以多种形式展示 重载多态（编译期）：函数重载、运算符重载 子类型多态（运行期）：虚函数 参数多态（编译期）：类模版、函数模版 强制多态（编译期/运行期）：基本类型转换、自定义类型转换
c++与c的区别（面向对象与面向过程差异）
面向过程：分析解决问题所需的步骤，并通过函数实现这些步骤 面向对象：把构成问题的事务分成各个对象，建立对象的目的不是为了完成一个步骤，而是描述某个事务在解决整个问题步骤中的行为。
一些其他细小的区别： 赋值 ：c只有 = ，而c++ 还有 () 比如 int x(5);
结构体：虽然c和c++的结构体默认都是public (注意c++类的默认，结构体默认public，继承默认也是public，类默认访问是private，默认继承也是private)，但是c++ 还可以和类一样用剩下的访问控制符 private、protect，而且c++ 的结构体也能通过派生类覆盖基类虚函数实现多态。 c和c++的结构体还有一个区别就是，一个结构标记声明后，在c中必须在结构体标记前添struct，才能做结构体类型名(或者 typedef struct Person{}Person;)。而在c++中可以直接把结构体标记充当结构体类型名来使用。 c/c++ 结构体声明的区别
c 的 string 和 c++ 的string c++ 的string 是对 char* 进行了封装，封装的string包含了 char*数组、容量、长度。注意string 可以动态扩展，每次扩展的时候另外申请一块比原来空间大两杯的空间，并将原字符串拷贝过去，并加上新增内容。</description>
    </item>
    
    <item>
      <title>Linux_关键字</title>
      <link>https://tutuwu2019.github.io/linux_%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Thu, 13 Jun 2024 21:46:35 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/linux_%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>This is a page about »Linux_关键字«.
linux 关键字 主要讲讲，我的linux 的一些使用笔记&amp;amp;资料
常用的命令 awk 命令 awk 常见变量
ARGC 命令行参数个数
ARGV 命令行参数排列
ENVIRON 支持队列中系统环境变量的使用
FILENAME awk 浏览的文件名
FS 设置输入域分隔符，等价于命令行 -F选项
NF 浏览记录的区域的个数
NR 已读的记录数
OFS 输出域分隔符
ORS 输出记录分隔符
RS 控制记录分隔符
{print $0} 整行打印 {print $1} 打印第一行 -F &#39;x&#39; 根据 x 作为截断 BEGIN &amp;amp; END BEGIN {action}处理任何输入行之前执行 END {action}处理所有出入行之后执行
计算所有数字的总和 awk &#39;BEGIN {sum = 0} {sum += $1} END{print &amp;quot;Total sum: sum}&#39; numbers.txt 统计表格</description>
    </item>
    
    <item>
      <title>Cpp_关键字</title>
      <link>https://tutuwu2019.github.io/cpp_%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Wed, 12 Jun 2024 15:30:32 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/cpp_%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>This is a page about »Cpp_关键字«.
cpp 关键字 {{ &amp;lt; toc &amp;gt;}}
static 隐藏。当编译多个文件是，所有未加static 前缀的全局变量和函数都具有全局可见性。(extern static int x; // 这个是无效的) 保持变量内容的持久。存储在静态数据区，默认初始化为0，注意这也是唯一的一次初始化。主持静态存储有两种，一个是 data区，用于存放已经初始化的全局/静态变量，另一个是bss区，用于存放未初始化的全局/静态变量，注意：默认初始化为0x00。这是从底层来讲为什么保持内容持久，从使用来讲的话，每次调用static 变量都是调用它的副本，而不是新开辟一个内存存储。这也可以理解内容的持久。 讲讲c++ 中的 static 一些特点：简单理解，类中的static成员(无论是变量还是方法)所有权都是归这个类本身，而不是类对象(所以，static 是类对象的共享资源)，所以会延伸很多限制，比如static成员方法只能调用static成员变量(注意：正常的类方法可以调用static方法)。不能通过this 指针获取staic 成员。该类的所有对象都只是拥有static的一份拷贝。static成员变量是先于类对象存在的，所以static对象是在类外完成初始化。static成员方法不能被virtual修饰，本质上static不属于任何对象或者实例，虚函数的的实现是通过对象的虚指针，而虚指针是通过this指针调用。(this-&amp;gt;vptr-&amp;gt;ctable-&amp;gt;virtual function) static code
c/c++ 基本数据类型的内存大小</description>
    </item>
    
    <item>
      <title>Gdb_core_dump</title>
      <link>https://tutuwu2019.github.io/gdb_core_dump/</link>
      <pubDate>Wed, 29 May 2024 02:42:32 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/gdb_core_dump/</guid>
      <description>This is a page about »Gdb_core_dump«.
Gdb_core_dump GDB 调试 GDB中文手册
GDB调试死循环
GDB调试入门
GDB 多线程调试
gdb core dump 调试 cat segfault.cpp
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; void cause_segfault(){ int *p = NULL; *p = 42; // int *p = (int*)malloc(sizeof(int)); // if(p == NULL){ // exit(1); // } // *p = 42; // printf(&amp;#34;the *p is %d&amp;#34;, *p); } int main(){ cause_segfault(); return 0; } 编译 g++ -g segfault.cpp -o segfault
# 查看 core dump 文件 存储路径 cat /proc/sys/kernel/core_pattern |/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e # 修改存储路径 sudo sysctl -w kernel.</description>
    </item>
    
    <item>
      <title>随写_0526</title>
      <link>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99_0526/</link>
      <pubDate>Sun, 26 May 2024 01:59:38 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99_0526/</guid>
      <description>This is a page about »随写_0526«.
随写_0526 生活就是没有的剧本的一场戏
看似都没有进展。 我害怕失去，可是没有什么可以再丢失的了 可是，有会有憧憬、向往、偏爱
人性啊！ 我也想要拥有啊 \
我又emo了 抽刀断水水更流
不管怎么说，还是鼓励自己再努力一点吧！
未完待续&amp;hellip; 一切都在路上，慢慢来</description>
    </item>
    
    <item>
      <title>Cpp_就业方向</title>
      <link>https://tutuwu2019.github.io/cpp_%E5%B0%B1%E4%B8%9A%E6%96%B9%E5%90%91/</link>
      <pubDate>Sat, 25 May 2024 03:22:21 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/cpp_%E5%B0%B1%E4%B8%9A%E6%96%B9%E5%90%91/</guid>
      <description>This is a page about »Cpp_就业方向«.
Cpp_就业方向 说实话好焦虑，尤其是短时间(这1～2年)，各种复杂的事情席卷而来，让人难以应付。 有工作方向的不断尝试，社会环境的不断变化……我想，最主要的就是从大学到社会的这个转变。 现在回想，我的大学好像也是荒废了，彻头彻尾的荒废，错过了很多东西，这些主要是技术栈的丰富吧，毫无疑问这和我个人的认知息息相关。 扯的有点远，接下来，我们看看 cpp/go 往分布式存储的发展
参考资料 为什么把**参考资料放第一位呢？**出了社会，本就是一无所有，本就是需要不断的汲取大量资料。
分布式存储解决方案 分布式存储阅读笔记 分布式存储系列 我的分布式存储之路 简单的分布式云存储服务 大数据知识汇总 基于哈希一致性k-v分布式存储 go 语言实现分布式存储服务 分布式对象存储 中间件、分布式、高性能存储 分布式存储系统
go 分布式存储系统(和前面的那个项目好像啊) zheng 哪吒？分布式存储系统 mongodb-4.4 分布式存储与计算 go-fastdfs go-family mongodb-5.0 基于 spring-sharding-mybaits 集成 redis 缓存的游戏分布式存储框架 架构师 公开课 CS162 的分布式 KV 存储项目 《分布式对象存储：原理、设计与实现》 算法：c语言实现
看到这里，应该大概才出来了，我是因为浏览器上标签打开的太多了，炸了，所以在这里做笔记呢！
发现很多知识，都是最近或者近一年集成最多了。全是在换大学的账啊！ 有些路，必定大家都要走，有的人觉悟高，很早就知道要怎么走，有的人需要多弯两下。 就像进大厂，觉悟高的人，知道走校招是最轻松的路，而有的傻瓜(像我)这里扭下那里停下，错过了很多，如果想冲大厂可能还要等3～5年了。当然也要适当的对大厂祛魅。
未完待续&amp;hellip;</description>
    </item>
    
    <item>
      <title>开源许可</title>
      <link>https://tutuwu2019.github.io/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF/</link>
      <pubDate>Fri, 24 May 2024 21:30:48 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF/</guid>
      <description>This is a page about »开源许可«.
开源许可 我看到很多github 上的仓库都会写一些开源许可的内容，我在创建仓库的时候也会出现开源协议选择，我也不太懂啊，就借住gpt做个小结吧
MIT License MIT License（麻省理工学院许可证）是一种宽松、开放源代码的许可证，它对使用、复制、修改和分发软件提供了极少的限制。该许可证以其简单明了和宽松的条款而闻名，使其成为开源软件项目中最受欢迎的许可证之一。
MIT License 的主要特点
自由使用：任何人都可以自由地使用软件，包括用于商业目的。 自由复制：允许用户自由地复制和分发软件。 自由修改：允许用户修改软件，并且可以选择是否将修改后的版本公开。 自由分发：可以分发修改后的版本，前提是保留原始许可证声明和版权声明。 MIT License 模版
MIT License Copyright (c) [年份] [作者] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;#34;Software&amp;#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</description>
    </item>
    
    <item>
      <title>Cpp_issue</title>
      <link>https://tutuwu2019.github.io/cpp_issue/</link>
      <pubDate>Thu, 23 May 2024 14:08:55 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/cpp_issue/</guid>
      <description>This is a page about »Cpp_issue«.
cpp_issue 一些基础讨论 指针大小 const 关键字 // 常变量 const int x = 10; // x 不能修改 x =20; // 这是错的 // 注意： const int xxx; int const yyy; /* const int xxx; const 放在类型前面表示这是一个常量类型的变量。这种写法更符合自然语言的习惯，读作 “常量整数 xxx”。 int const yyy; const 放在变量名后面，但在类型之后，语义上与前者相同。这种写法有时更容易理解复杂的指针声明，因为它遵循从右到左的阅读顺序。 */ // 指针 // 指向常量的指针 const int* ptr = &amp;amp;x; *ptr = 20; //这是错的，*ptr 的值不能通过 ptr 修改，但是 ptr可以指向其他地址 int y = 20; prt = &amp;amp;y; // 常量指针 ptr 的地址不能修改，但是 *ptr 可以修改 int* const ptr = &amp;amp;x; int z = 30; *ptr = y; prt = &amp;amp;z; // 这是错误的 // 指向常量的常量指针 const int* const ptr = &amp;amp;x; // *ptr 和 ptr 都不能被修改 // *ptr = 20; // 错误，不能修改 *ptr // int z = 30; // ptr = &amp;amp;z; // 错误，不能修改 ptr 指向的地址 // 引用 // 对常量的引用 const int &amp;amp;ref = x; // ref 不能用于修改 x 的值 // ref = 20; // 错误，不能修改 ref 指向的值 值&amp;amp;指针&amp;amp;引用 值&amp;amp;指针&amp;amp;引用</description>
    </item>
    
    <item>
      <title>随写_emo_520</title>
      <link>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99_emo_520/</link>
      <pubDate>Tue, 21 May 2024 00:39:33 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99_emo_520/</guid>
      <description>This is a page about »随写_emo_520«.
随写_emo_520 看着听着自己拍的视频，感慨万分
#六成以上的年轻人选择躺平
再看看自己，一无所有。
感觉读书，真的不值钱。甚至特别掉价。
女性地位上升，普普通通的我，拿什么去憧憬美好生活？
我在胡说八道。自己看看就好吧。
焦虑，心不狠，佛系，卷不赢
放不下，拿不起。
我拿什么换我的未来？
女性地位的提升，换言之，大家同样的起点，都是普通的“长相”、“正常的性格”、“同样的起跑线”……
相亲，就是也是一个市场，讲究“门当户对”，讲究，房、车、money
我，拿什么换我的康庄大道？
焦虑，焦虑之后还得继续学习。
眼界、思维、技术，各个方面都要有建树。
难道，每天看着这未知的k线能有未来？
脚踏实地吧
我得去看qt 相关视频了，明天约了一个外包的面试。说实话，不愿意去外包，先去看看外包的面试是一个怎么样的流程吧。
专研的时候就再耐着性子学十分钟。实在学不下，就去附近的图书馆学习。
肚子在长肉，有空就练练腹部啊 end 2024.5.21 00:52</description>
    </item>
    
    <item>
      <title>随写笔记_OS_05_20</title>
      <link>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99%E7%AC%94%E8%AE%B0_os_05_20/</link>
      <pubDate>Mon, 20 May 2024 12:49:58 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99%E7%AC%94%E8%AE%B0_os_05_20/</guid>
      <description>This is a page about »随写笔记_OS_05_20«.
一些关键字 进程 进程：一个正在运行的程序的实例，是操作系统进程资源分配和调度的基本单位。每个进程都有自己的地址空间、内存、文件描述符、全局变量等资源。
特点：
独立性：进程拥有自己独立的地址空间，进程之间相互隔离 资源拥有：每个进程有自己独立的内存空间、文件描述符、进程控制块 并发性：多个进程可以并发执行，每个进程可以独立运行 生命周期：进程的生命周期包括创建、就绪、运行、等待和终止 组成：
代码段：存储可执行的代码 数据段：存储全局变量和静态变量 堆：用于动态内存分配 栈：存储函数调用的返回地址、本地变量、函数局部变量 进程控制块(PCB)：存储进程的状态、程序计数器、寄存器信息、调度信息、内存管理信息 linux 进程内核结构
进程控制块（Process Control Block, PCB）： 任务结构（task_struct）：是每个进程的主要数据结构，包含了进程的所有信息，如进程 ID、状态、优先级、程序计数器、内存管理信息、打开的文件描述符等。 进程地址空间： 代码段：存储可执行代码。 数据段：存储全局变量和静态变量。 堆（Heap）：用于动态内存分配。 栈（Stack）：存储函数调用的返回地址、本地变量等。 内存管理： 页表（Page Table）：映射虚拟地址到物理地址。 内存区域描述符（vm_area_struct）：描述进程地址空间中的各个区域。 文件描述符表：存储进程打开的文件描述符，每个文件描述符对应一个文件结构（file struct）。
信号处理：与进程相关的信号处理信息。
调度信息：进程的调度优先级和调度策略。
linux线程内核结构 在 Linux 中，线程被视为一种轻量级进程，它们共享同一个进程的某些资源，但每个线程都有自己的执行上下文。线程的内核结构也包含在 task_struct 中，但有一些共享和独立的部分：
共享部分：
进程地址空间：同一进程的线程共享相同的地址空间，包括代码段、数据段、堆和全局变量。 文件描述符表：所有线程共享相同的文件描述符表。 信号处理：线程共享信号处理设置。 用户 ID 和组 ID：同一进程的线程共享相同的用户 ID 和组 ID。 独立部分：
线程控制块（Thread Control Block, TCB）：每个线程有自己的 TCB，存储线程的执行上下文，如寄存器状态、程序计数器和栈指针。 内核栈：每个线程有自己的内核栈，用于处理内核态的函数调用和中断处理。 线程局部存储（Thread Local Storage, TLS）：用于存储线程特有的数据。 进程的生命周期</description>
    </item>
    
    <item>
      <title>C_cpp_and_game</title>
      <link>https://tutuwu2019.github.io/c_cpp_and_game/</link>
      <pubDate>Sun, 19 May 2024 13:08:20 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/c_cpp_and_game/</guid>
      <description>This is a page about »C_cpp_and_game«.
c_cpp_and_game lua and c/c++ lua 号称世界最快的脚本
参考01
游戏结构之内存池设计 参考01</description>
    </item>
    
    <item>
      <title>Cpp面试题_自用</title>
      <link>https://tutuwu2019.github.io/cpp%E9%9D%A2%E8%AF%95%E9%A2%98_%E8%87%AA%E7%94%A8/</link>
      <pubDate>Sun, 19 May 2024 11:43:21 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/cpp%E9%9D%A2%E8%AF%95%E9%A2%98_%E8%87%AA%E7%94%A8/</guid>
      <description>This is a page about »Cpp面试题_自用«.
cpp 面试题_自用 cpp 专栏 试着思考，有深度
一、关键字
static 有三种作用
final 和 override？为什么final 能提高代码执行效率
thread_local 变量作用、存放位置、生命周期
一个变量可以既是const又是volatile吗？
null和nullptr，为什么要引入nullptr
为什么noexcept能提高性能？
delete[] 是怎么知道数组长度的？
new、placement new ,operator new 的区别,怎么把对象new在栈上
__cdecl 和 __stdcall
重载类的delete运算符，delete这个对象时会发生什么？
函数调用压栈流程？
生命和定义的作用，从编译角度说？
现代大部分编程语言都没有头文件，c++为什么要有头文件？头文件和模块的优劣比较?
c++11为什么引用枚举类
程是从main 函数开始执行的吗？
虚函数怎么实现的，性能真的更慢吗？
构造函数、西沟函数、重载运算符函数可以是虚函数吗？类成员函数模版可以是虚函数</description>
    </item>
    
    <item>
      <title>随写笔记</title>
      <link>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 19 May 2024 10:32:25 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%99%E7%AC%94%E8%AE%B0/</guid>
      <description>This is a page about »随写笔记«.
随写笔记 代码简洁之道 代码简洁之道01
同步、异步、阻塞io、非阻塞io 参考01 参考02 参考03 参考04 参考05 参考06
云原生系统 devops 关键词：云原生系统 devops
耗子&amp;mdash;系统架构的一些原则 跳转
服从客观，抵制主观
这大概是我当下的感受吧，在大学时期总是主观的选择那个看起来逻辑简单的，比如说用c/c++做主力语言，而不是java，后来就导致，各种坑、各种坎坷
其实，转方向是必然的，就像现在跳go，我们总是容易看帖子、短视频、公众号软文听信了那个主观选择，然后这条路走着走着发现不对劲，后悔啊、说多了都是🥱
总之一切都来得及，一切都在路上，用文章结那句话来讲，&amp;ldquo;进步来于探索，探索需要付出代价，但收获是值得的.&amp;rdquo;
共勉
后续更新&amp;hellip;</description>
    </item>
    
    <item>
      <title>Http_vs_https_and_get_vs_post</title>
      <link>https://tutuwu2019.github.io/http_vs_https_and_get_vs_post/</link>
      <pubDate>Sun, 19 May 2024 03:38:47 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/http_vs_https_and_get_vs_post/</guid>
      <description>This is a page about »Http_vs_https_and_get_vs_post«.
Http_vs_https_and_get_vs_post Http_vs_https get_vs_post RFC2616中没有对url 长度有限制，但是浏览器会有长度限制。还有浏览器会有url缓存记录
GET 只允许 ASCII格式编码，而POST则没有要求。
GET 只采用 url 传入信息，不安全，所以把数据裸露在url 使用GET 方法传输不是明智的选择。
POST 不仅可以通过参数传递信息，还能通过 body 传递消息，通常通过表单上产消息给服务器就是采用post 方法
注意：这两个只是规范，是在http协议层定义的两个方法，所以本质上都是通过tcp 传递数据，没有实质性差别
V2EX 上看到一个大哥说，GET 和 POST 的区别就是，一个的方法是’GET’，一个的方法是’POST’。我觉得这个答案很有哲理性.. 很有佛教性空的味道。 就是说：在 http 这个应用层协议上来说，两种被定义为不同的方法，但是从 TCP 这个传输层上说，他们并没有什么区别。给 GET 加上 request body，给 POST 带上 url 参数？完全可以。
参考 引用01</description>
    </item>
    
    <item>
      <title>Git_tips</title>
      <link>https://tutuwu2019.github.io/git_tips/</link>
      <pubDate>Thu, 16 May 2024 00:16:27 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/git_tips/</guid>
      <description>This is a page about »Git_tips«.
git tips 老实讲，git 的很多功能我还不是很熟，常用吧，用着用着就熟悉了
本地git仓库被污染了 是这样的，hugo 博客在编写完了，然后hugo 生成静态页，hugo server 正常，但是 git push 迟迟没有更新
大概率是本地的git 仓库被污染了。
其实环境被污染，挺难处理的，尤其是《新手》、《对这个环境不熟》
我甚至想暴力把github 仓库删除，重新创建。
后来误打误撞的解决了
# 先创建一个 git checkout --orphan temp # 创建一个新的孤立分支 # 创建一个空的提交 什么是空的提交？空的提交就是什么也没有改变，和原来的一样。 默认git 是不允许的，但是可以采用 --allow-empty 强制空提交 # 在这个特定的情况下，你使用这个命令的目的是为了在远程仓库中创建一个空的提交，以便清空远程仓库的内容。这个空的提交并没有任何实际的更改，但是它会在提交历史中留下一个标记，表示远程仓库在某个特定时间点被清空了。 git commit --allow-empty -m &amp;#34;Clear remote repository&amp;#34; # 删除本地的 main 分之 git branch -D main # 删除本地的 main 分支 # 将新的孤立分支重命名为 main git branch -m temp main git push origin main --force 注： git remote -v 查看远程远程仓库信息</description>
    </item>
    
    <item>
      <title>Cpp_and_leecode</title>
      <link>https://tutuwu2019.github.io/cpp_and_leecode/</link>
      <pubDate>Wed, 15 May 2024 23:16:14 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/cpp_and_leecode/</guid>
      <description>This is a page about »Cpp_and_leecode«.
leecode2589 你有一台电脑，它可以 同时 运行无数个任务。给你一个二维整数数组 tasks ， 其中 tasks[i] = [starti, endi, durationi] 表示第 i 个任务需要在 闭区间 时间段 [starti, endi] 内运行 durationi 个整数时间点（但不需要连续）。
当电脑需要运行任务时，你可以打开电脑，如果空闲时，你可以将电脑关闭。
请你返回完成所有任务的情况下，电脑最少需要运行多少秒。
示例 1： 输入：tasks = [[2,3,1],[4,5,1],[1,5,2]] 输出：2 解释： - 第一个任务在闭区间 [2, 2] 运行。 - 第二个任务在闭区间 [5, 5] 运行。 - 第三个任务在闭区间 [2, 2] 和 [5, 5] 运行。 电脑总共运行 2 个整数时间点。 示例 2： 输入：tasks = [[1,3,2],[2,5,3],[5,6,2]] 输出：4 解释： - 第一个任务在闭区间 [2, 3] 运行 - 第二个任务在闭区间 [2, 3] 和 [5, 5] 运行。 - 第三个任务在闭区间 [5, 6] 运行。 电脑总共运行 4 个整数时间点。 c++11以后还有c++17、c++20、c++21等新特性</description>
    </item>
    
    <item>
      <title>职业发展</title>
      <link>https://tutuwu2019.github.io/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/</link>
      <pubDate>Wed, 15 May 2024 19:01:11 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95/</guid>
      <description>This is a page about »职业发展«.
职业发展 我的困惑 一句话，计算机辐射的领域太多了，所以造就了很多工作方向，很多岗位
在大学的时候，我的思维还没转过来，也和当时的培养方案有关。
要学这，有要学那，还有考试，让人好忙，可是真正学的东西少之又少
加上自己当时不喜欢java，看到jetbrains idea 然后配环境、搞maven 弄的很难受
到了找工作的时候，跟着牛客的c++高性能服务器入了门，自此进入了c/c++服务器这个方向
工作方向是网关认证领域，用vscode 远程连linux，真的好舒服，尽管有时候项目要在低版本linux编译&amp;amp;运行，然后vscode 对低版本的扩展越来越不友好，当时也想了《简单》搞gcc 库依赖解决低版本问题，gcc 是linux 的底层库，遂换了一个解决方案
发现（base 广州），c/c++ 的服务器岗位特别少，主要面向游戏服务器(重点是要有实际游戏开发经验)，其实就是c/c++ 客户端，做QT的，说实话，自己不是很感冒
后面想着要不再学一门主力语言go，后面发现，go 主要是做网络（网关？）有优势，做业务还得java，兜兜转转又回来🤣
接下来，定下来就主方向，c/c++、go，然后往分布式存储、网关方向学习、成长。
职业发展感慨 当下的环境这么差，大家有目共睹。
可是，我的朋友圈，有人从字节跳到虾皮
他的朋友圈个性签名是：Dream is possible
我很是震撼，我记得他实习在虎牙做直播，后来毕业就跳到了字节，应该在字节呆了有3年了？大家都说字节1年，人间3年。我真的很震撼，很多方面，有技术、有觉悟、也有职业发展
学历决定下界，思维决定上界。可能很多东西，像思维啊，已经是定数了。
但是没事啊!慢就慢点，把真本领练出来，构造自己的护城河。
加油！
最后 一点感悟：
没有什么是一劳永逸。工作==拿时间换钱
把握当下，过去了的很难再回来
焦虑的时候，就停下来想10s，再做
要对大厂祛魅，但是要向技术抬头，追求
最后一点，保持身体健康，坚持锻炼，keep contact with family.</description>
    </item>
    
    <item>
      <title>Lua_and_c_cpp</title>
      <link>https://tutuwu2019.github.io/lua_and_c_cpp/</link>
      <pubDate>Wed, 15 May 2024 18:55:31 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/lua_and_c_cpp/</guid>
      <description>This is a page about »Lua_and_c_cpp«.
lua 我想，lua 能这么火，讲全世界最快的脚本 在游戏领域确实首屈一指 c + lua 好像，有人讲国内lua 的火，是云风点的
c/c++ 看似领域很多，但是每个领域又都有自己的护城河，一旦哪天被优化了，很大概率会有因为当初选c/c++ 这条路又骂自己一遍。为什么当初不把 java 给啃下去
lua 与 c/c++ 之间的合作 参考一下的链接就好了，如果还没有入门，那就去B站看看相关的视频
参考01 参考02 参考03 参考04 参考05 参考06 参考07 参考08 参考09 参考10 参考11 参考12 参考13 参考14</description>
    </item>
    
    <item>
      <title>计网</title>
      <link>https://tutuwu2019.github.io/%E8%AE%A1%E7%BD%91/</link>
      <pubDate>Mon, 13 May 2024 23:30:49 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E8%AE%A1%E7%BD%91/</guid>
      <description>This is a page about »计网«.
计算机网络&amp;ndash;面试常见问题(自用) 网络结构 七层模型&amp;amp;协议 物理层，传输单位bit，IEE802.3、CLOCK、RJ45 数据链路层，传输单位帧，MAC、VLAN、PPP 网络层，传输单位包，IP、ARP、ICMP 传输层，传输单位报文，TCP、UDP 会话层，输出单位SPDU，RPC、NFS 建立、管理、终止会话 表示层，传输单位PPDU，JPEG、ASII 对数据翻译、加密、压缩 应用层，传输单位APDU，FTP、HTTP、DNS
TCP/IP 4层模型 网络接口层，MAC、VLAN 网络层，IP、ARP、ICMP 传输层，TCP、UDP 应用层，HTTP、DNS、SMTP
常见的网络协议 tcp、udp 特点： tcp 三次握手/四次挥手 常见 专有名词，TIME_WAIT(作用、弊端、如何优化) tcp 可靠传输 数据包校验 对失序数据包重排 丢弃重复数据 应答机制 超时重发 流量控制 拥塞控制（满开始、拥塞避免、快重传、快恢复） 流量控制 发送方控制发送速率
滑动窗口 什么是滑动窗口 tcp 采用滑动窗口进行流量控制
拥塞控制 什么事拥塞控制 tcp 拥塞控制
tcp 粘包 发送方粘包
发送方与接收方保持长连接（短连接不存在粘包问题） 过小数据合并发送，这个合并的过程再发送缓冲区进行，数据发送出来就已经是粘包状态
接收方产生粘包
read、recv 无法一次全部读出，然后下一个数据又到放入缓冲区末尾，等读取的数据就是一个粘包
如何解决粘包问题
分包机制，特殊字符控制、在包头首部添加数据包的长度
注意使用netty框架就会有专门的编码器和解码器解决拆包和粘包问题
基于tcp&amp;amp;udp 常见的协议 tcp
http 80 https 443 ftp 21 telnet 23 smtp 25 udp</description>
    </item>
    
    <item>
      <title>加密博客</title>
      <link>https://tutuwu2019.github.io/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 12 May 2024 14:32:26 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E5%8A%A0%E5%AF%86%E5%8D%9A%E5%AE%A2/</guid>
      <description>This is a page about »加密博客«. 接下来的内容会被加密(猜猜什么被加密了哦) 文章的部分内容被密码保护：
--- DON&#39;T MODIFY THIS LINE --- You cannot see me unless you&amp;rsquo;ve got the password! This is the content you want to encrypt!
明明就 啊哈哈哈，啥也没有嘛
Do remember to close the hugo-encryptor shortcodes tag:
else </description>
    </item>
    
    <item>
      <title>我讨厌蚊子</title>
      <link>https://tutuwu2019.github.io/%E6%88%91%E8%AE%A8%E5%8E%8C%E8%9A%8A%E5%AD%90/</link>
      <pubDate>Thu, 09 May 2024 17:55:24 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E6%88%91%E8%AE%A8%E5%8E%8C%E8%9A%8A%E5%AD%90/</guid>
      <description>我讨厌蚊子 由来？
广州的蚊子特别多，尤其是阴雨天的时候，恰巧今年广州的雨下的特别多
蚊子，好像也摸头了人类的习性
它们总是喜欢单兵作战，出来觅食的时候还不会发出声音，可能进化的太厉害了吧
常常我拍死一只🦟以后，紧接着，过一点时间另一只蚊子又开始出动了
常常，我察觉到了有蚊子在咬，惯性的去抖动，看了一下，小腿，没有蚊子，大概率蚊子没有吃到我的血吧
可是啊！蚊子你也没有吸到我的血，我也没有拍到你，然后过了一段时间，你又来！这就很烦人了，让人分心&amp;hellip;
我的抗蚊策略
点蚊香，这个是最有效的，可是每天要掰、每天要点有时候就很烦 蚊香液，这个很方便，一劳永逸，但貌似效果不佳 弄蚊帐，好像大家都是这样弄的，只是当我在蚊帐外，电脑前，我怎么弄啊！！！ 关门关窗，开空调，这个也很有效，但是有点憋，好像温度降下来，蚊子也会乖乖呆别处 一个冷知识，出来咬我们的蚊子都是母蚊子！
有时候，我会很佛，好像理解世界、包容世界，它咬就它咬，你不要让我感到不舒服，痒啊、痛啊，然后还要去参与防蚊保卫战！
蚊子，真可恶，广州的蚊子太多了
贴一下蚊子有什么危害 蚊子，这么小，我们一巴掌就能把它拍死，可是它仍然这么拼的出来工作（吸我们的血，去繁衍后代）而且已经进化的飞行轨迹难以抓摸，环境这么糟糕，也能活着，那我们是不是更因该努力一些呢？
虫子虽然很弱小，但是从来没有真正被消灭过
后面有激烈的战场画面，不感兴趣可划走（有点血腥！） 后面又有蚊子行动，而且他们好狡猾、贪婪（明明已经吸了很多血，还不走） (蚊子1号)
(蚊子2号)</description>
    </item>
    
    <item>
      <title>锁</title>
      <link>https://tutuwu2019.github.io/%E9%94%81/</link>
      <pubDate>Thu, 09 May 2024 17:34:01 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%94%81/</guid>
      <description>锁 都有哪些锁呢？
乐观锁 悲观锁 共享锁 排他锁 行锁 表锁 死锁 自旋锁 &amp;hellip; 锁1 Mysql/InnoDB锁
MySQL/InnoDB加锁 在数据库有高并发请求的时候，如何保证数据完整性？产生死锁问题如何排查以及解决？
面试 面试题1 面试题2 面试3</description>
    </item>
    
    <item>
      <title>Go基本数据类型</title>
      <link>https://tutuwu2019.github.io/go%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 09 May 2024 12:18:11 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/go%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>go基本数据类型 编程有感 这是一篇由浅入深介绍go 数据类型的笔记(自用) 对于新手，最快进入学习状态的方式莫过于，看别人的写的博客或者视频了。当然高手写的博客或者视频那就更好了。 这是比较好的切入点，我也看了 go 的官方文档，感觉写的很浅 学技术，最重要的是学权威内容，这个东西不能出现二义性，可是网上（内网）的很多“博客”都是半吊子水，这对于思维不活泛的同学（不比如我，要多走很多弯路😩😩），后面深入的话还是要看源码的
主要有以下内容，会由浅入深以及结合面试题总结（05-08）
常见的数据数据类型（参考c/c++、python、js、java）int、string、struct、slice、map 关键字 new、make interface、闭包 关键字 reflect chan、defer、goroutine 抢占式调度? panic、recover GMP Go的内存管理(栈内存管理、) 常见的数据数据类型（参考c/c++、python、js）int、string、struct、slice、map 先添个小料，我问gpt go1.18中的切片扩容规则的时候，它直接讲 切片扩容阈值threshold 是1024，但是在go1.18以后的切片扩容阈值改成了256，而且扩容规则也调整了一些
int string struct slice 切片 本质是一个数据结构，包含指向底层数组的首地址，切片大小以及切片容量 入门讲解
// 写几种 定义 方式 var tmp01 []int = make([]int, 2, 5) tmp01 = append(tmp01, 1, 2, 3, 4, 5) tmp02 := []int{1, 2, 3, 4, 5} tmp03 := new([]int) *tmp03 = append(*tmp03, 1, 2, 3, 4, 5) 注意采用的是左闭右开 demo</description>
    </item>
    
    <item>
      <title>面试基础算法c&#43;&#43;_go</title>
      <link>https://tutuwu2019.github.io/%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95c-_go/</link>
      <pubDate>Thu, 09 May 2024 02:58:29 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95c-_go/</guid>
      <description>列举一些算法 杂序（c++和go 实现） 链表反转 链表反转的核心思想就是每次遍历 head 链表的时候把当前节点充当newHead 的头节点，在把上轮的newHead 接到 newHead 的屁股上
c++ struct ListNode{ int val; struct ListNode* next; ListNode(int x):val(x),next(nullptr){}; }; class solution{ ListNode* ReverseList(ListNode* head){ ListNode* nhead; while(head != nullptr){ ListNode* tmp; tmp = nhead; nhead = head; head = head-&amp;gt;next; nhead-&amp;gt;next = tmp; } return nHead; } } go package main import( &amp;#34;fmt&amp;#34; ) type ListNode struct{ Val int Next *ListNode } func ReverseList(head *ListNode)*ListNode{ var newHead *ListNode = nil for head !</description>
    </item>
    
    <item>
      <title>五一plog</title>
      <link>https://tutuwu2019.github.io/%E4%BA%94%E4%B8%80plog/</link>
      <pubDate>Wed, 08 May 2024 16:30:54 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E4%BA%94%E4%B8%80plog/</guid>
      <description>五一劳动节快乐 五一前的周末 桂林 桂林 (很惬意，放轻松) (桂林米粉)
广州 北京路 (北京路)
圣心大教堂 (圣心大教堂)
烤乳鸽 (现在写博客的时候还意犹未尽，皮脆、肉香！比北京烤鸭还好吃！)
(再来一张特写吧)
总结 我比较喜欢用 引用 大概不会用 md 设计 五一，体验了很多以前看起来很远的东西，总的回忆是美好的 但是，要说但是了！就像哲学里头讲的那样，前面的路是曲折盘旋，还是要更努力一些，才不会被这个世界嫌弃！</description>
    </item>
    
    <item>
      <title>高性能服务器</title>
      <link>https://tutuwu2019.github.io/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 08 May 2024 16:10:36 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>高性能服务器分析 声明：一点点自己的总结与感悟吧，如果有不对的地方，烦请指正
服务器最重要的是能够解决复杂的网络问题，大量并发请求，如经典的c10K ，当然后面这个并发问题延伸到c10M
当然这个 c10k 已经被从硬件和软件两个方面解决了，硬件方面应该是在 摩尔定律上下功夫？ 软件方面就有很多方向了，然后接下来着重讲软件方面的解决方案
OS &amp;amp; question 有人说，操作系统的底层设计让通信开销增大
原话是，os 的内核不是解决c10M问题的办法，相反os 的内核正是导致C10M问题的关键
简单解释一下，比如网络包进入网卡，然后通过网卡进入内核处理，内核接着拷贝把数据转给用户程序处理，再把处理的数据通过网卡发送客户端
大致的思路是这样，然后就有人在这里分析，分析的结论有以下几个方面
中断处理，频繁的硬件中断请求会增加os资源的开销，尤其是硬件中断会打断低级的软中断或者系统调用的执行过程，这种打断会增加一定的性能开销 内存拷贝，数据包从网卡到内核开辟的缓冲区，再由内核缓冲区到用户态空间，在linux 内核协议栈汇中的耗时占到了整个数据包处理过程的57.1% 上下文切换，频繁的中断处理，会产生大量的上下文切换开销，而且可能涉及资源竞争，这就会涉及锁的处理，用锁也是一个很大开销 局部性失效，在多核处理器中，一个数据包跨多个cpu核心，如数据包中断在cpu0，内核处理在cpu1，用户态处理在cpu2，这样跨多核，容易增加cpu缓存失效，造成局部性失效 内存管理，服务器内存页4k ？然后为了提高内存的访问速度，避免cache miss ，增加cache 的映射表条目，但是这增加了cpu 检索效率 当然也有解决方案
控制层和数据层分层 多核技术 NUMA 亲和性 大页存技术 无锁技术 解决案例 是的，有一些包含上述的解决方案的网络框架（🤦）好像有很多很多网络框架，都说自己贼牛逼（高可用、分布式、高性能
具体到的有，6wind、Windriver、Netmap、DPDK
这个DPDK 其实好像很火，后面可以有空研究一下
心得 好像，自己写过的项目，高性能是这样走的，
首先是对数据的处理，使用各种池 线程池（Thread Pool）
线程池是预先创建一组线程，任务提交后将分配给空闲的线程处理。线程池用于避免线程频繁创建和销毁的开销，提高并发性能。
数据库连接池（Connection Pool）
数据库连接池管理数据库连接。它预先创建一组数据库连接，并在需要时分配。这样可以减少每次连接数据库的开销，提高数据库操作的性能。
对象池（Object Pool）
对象池用于管理可重复使用的对象，避免对象的频繁创建和销毁。对象池可以用在各种场景，如游戏开发中的游戏对象、数据库连接、网络资源等。
缓存池（Cache Pool）
缓存池用于管理缓存，提供快速访问数据的能力。缓存池通常用于提高系统性能和响应速度，减少数据库或其他后端系统的负载。
线程本地池（Thread Local Pool）
线程本地池为每个线程创建一组独立的资源，确保每个线程都有自己独立的资源池。这在需要避免线程间资源共享的情况下非常有用。
内存池（Memory Pool）
内存池用于管理内存块。通过预先分配一块大内存，然后从中划分小块，减少内存分配和释放的开销。这种技术在需要频繁分配和释放内存的应用中非常有用。
连接池（Connection Pool）
连接池可以用于网络连接管理。它类似于数据库连接池，但用于管理网络连接，如与服务器、外部服务等的连接。
资源池（Resource Pool）
资源池可以管理各种类型的资源，如线程、对象、连接等。资源池的目的是提高资源利用率，减少资源创建和销毁的开销。
消息池（Message Pool）</description>
    </item>
    
    <item>
      <title>随写01</title>
      <link>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%9901/</link>
      <pubDate>Wed, 08 May 2024 00:25:06 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%9A%8F%E5%86%9901/</guid>
      <description>This is a page about »Unordered_write«.
随写 有一种东西，它会在某个夏天的夜晚像风一样突然袭来，让你猝不及防，无法安宁，与你形影相随，挥之不去，我不知道那是什么，只能称它为爱情。
励志 虫子虽然很弱小，但是重来没有被消灭过。</description>
    </item>
    
    <item>
      <title>md 语法参考</title>
      <link>https://tutuwu2019.github.io/md-%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://tutuwu2019.github.io/md-%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://simplemde.com/markdown-guide&#34;&gt;更多玩法参考(markdown-guide)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要讲讲用 md 语法 去构建 hugo 元素，同时也可以像html 一样使用css 对其进行装饰(基于某个hugo 主题)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
